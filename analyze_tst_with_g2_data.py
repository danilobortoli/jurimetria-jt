#!/usr/bin/env python3
"""
Analisador TST + G2 - Usando Dados Reais de G1 quando Dispon√≠veis
Combina dados TST com an√°lise dos TRTs para extrair dados reais de G1.
"""

import json
import csv
import glob
from collections import defaultdict
from datetime import datetime

class TSTWithG2Analyzer:
    """Analisa TST combinando com dados reais de G1 extra√≠dos dos TRTs."""
    
    def __init__(self):
        self.output_path = "tst_g2_combined_results"
        import os
        os.makedirs(self.output_path, exist_ok=True)
        
        # C√≥digos de movimento por inst√¢ncia
        self.primeira_instancia_codes = {
            219: 'Proced√™ncia',
            220: 'Improced√™ncia', 
            221: 'Proced√™ncia em Parte'
        }
        
        self.segunda_instancia_codes = {
            237: 'Provimento',
            238: 'Provimento em Parte',
            242: 'Desprovimento',
            236: 'Nega√ß√£o de Seguimento'
        }
        
        # Cache para dados G2
        self.g2_data_cache = {}
    
    def load_g2_data(self):
        """Carrega todos os dados G2 (TRT) para buscar informa√ß√µes de G1."""
        print("üìÇ Carregando dados G2 (TRT)...")
        
        g2_pattern = '/Users/danilobortoli/Documents/Tese de doutorado da Andreia/Dados da segunda extra√ß√£o/raw/trt*.json'
        g2_files = glob.glob(g2_pattern)
        
        print(f"üìÅ Encontrados {len(g2_files)} arquivos G2")
        
        g2_with_g1_data = {}
        total_g2_cases = 0
        g2_cases_with_g1 = 0
        
        for i, file_path in enumerate(g2_files[:20]):  # Analisa primeiros 20 arquivos para otimizar
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    total_g2_cases += len(data)
                    
                    for case in data:
                        numero = case.get('numeroProcesso', '')
                        movimentos = case.get('movimentos', [])
                        
                        # Busca c√≥digos G1 nos movimentos G2
                        g1_movements = []
                        for mov in movimentos:
                            codigo = mov.get('codigo')
                            if codigo in self.primeira_instancia_codes:
                                g1_movements.append({
                                    'codigo': codigo,
                                    'resultado': self.primeira_instancia_codes[codigo],
                                    'nome': mov.get('nome', ''),
                                    'data': mov.get('dataHora', '')
                                })
                        
                        if g1_movements:
                            # Extrai core do n√∫mero para matching
                            core = self.extract_case_core(numero)
                            g2_with_g1_data[core] = {
                                'numero_g2': numero,
                                'g1_movements': g1_movements,
                                'g2_movements': self.extract_g2_movements(movimentos),
                                'fonte_arquivo': file_path
                            }
                            g2_cases_with_g1 += 1
                
                if i % 5 == 0:
                    print(f"  Processados {i+1}/{len(g2_files[:20])} arquivos G2...")
                    
            except Exception as e:
                print(f"‚ùå Erro ao carregar {file_path}: {e}")
        
        if total_g2_cases > 0:
            print(f"‚úÖ G2 carregado: {total_g2_cases:,} casos, {g2_cases_with_g1:,} com dados G1 ({(g2_cases_with_g1/total_g2_cases)*100:.1f}%)")
        else:
            print(f"‚úÖ G2 carregado: {total_g2_cases:,} casos, {g2_cases_with_g1:,} com dados G1")
        return g2_with_g1_data
    
    def extract_case_core(self, numero_processo):
        """Extrai core do n√∫mero do processo para matching."""
        if not numero_processo:
            return ""
        
        # Remove tudo que n√£o √© d√≠gito
        numbers_only = ''.join(filter(str.isdigit, numero_processo))
        if len(numbers_only) >= 20:
            # Formato padr√£o CNJ: NNNNNNN-DD.AAAA.J.TR.OOOO
            # Core = NNNNNNN + AAAA + J + TR
            return numbers_only[:7] + numbers_only[9:13] + numbers_only[13:14] + numbers_only[14:16]
        return numbers_only
    
    def extract_g2_movements(self, movimentos):
        """Extrai movimentos de G2."""
        g2_movements = []
        for mov in movimentos:
            codigo = mov.get('codigo')
            if codigo in self.segunda_instancia_codes:
                g2_movements.append({
                    'codigo': codigo,
                    'resultado': self.segunda_instancia_codes[codigo],
                    'nome': mov.get('nome', ''),
                    'data': mov.get('dataHora', '')
                })
        return g2_movements
    
    def load_tst_data(self):
        """Carrega dados do TST."""
        print("üìÇ Carregando dados TST...")
        
        tst_files = [
            '/Users/danilobortoli/Documents/Tese de doutorado da Andreia/Dados da segunda extra√ß√£o/raw/tst_20250628_201708.json',
            '/Users/danilobortoli/Documents/Tese de doutorado da Andreia/Dados da segunda extra√ß√£o/raw/tst_20250628_201648.json',
            '/Users/danilobortoli/Documents/Tese de doutorado da Andreia/Dados da segunda extra√ß√£o/raw/tst_20250628_201545.json'
        ]
        
        all_tst_data = []
        for file_path in tst_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    all_tst_data.extend(data)
                    print(f"‚úÖ {file_path}: {len(data):,} casos")
            except Exception as e:
                print(f"‚ùå Erro ao carregar {file_path}: {e}")
        
        print(f"‚úÖ Total TST carregado: {len(all_tst_data):,} casos")
        return all_tst_data
    
    def filter_assedio_moral_cases(self, tst_data):
        """Filtra casos de ass√©dio moral."""
        print("\\nüéØ Filtrando casos de ass√©dio moral...")
        
        assedio_codes = [1723, 14175, 14018]
        assedio_cases = []
        
        for case in tst_data:
            assuntos = case.get('assuntos', [])
            
            is_assedio = False
            for assunto in assuntos:
                if isinstance(assunto, dict):
                    codigo = assunto.get('codigo')
                    if codigo in assedio_codes:
                        is_assedio = True
                        break
                elif isinstance(assunto, (int, str)):
                    if int(assunto) in assedio_codes:
                        is_assedio = True
                        break
            
            if is_assedio:
                assedio_cases.append(case)
        
        print(f"‚úÖ Casos de ass√©dio moral: {len(assedio_cases):,}")
        return assedio_cases
    
    def analyze_case_with_g2_data(self, case, g2_data):
        """Analisa caso TST combinando com dados G2 reais."""
        numero = case.get('numeroProcesso', '')
        tst_resultado = case.get('resultado', '')
        
        # Busca dados G2 correspondentes
        core = self.extract_case_core(numero)
        g2_info = g2_data.get(core)
        
        # Extrai hist√≥rico TST
        movimentos = case.get('movimentos', [])
        tst_g1 = []
        tst_g2 = []
        
        for mov in movimentos:
            codigo = mov.get('codigo')
            if codigo in self.primeira_instancia_codes:
                tst_g1.append({
                    'codigo': codigo,
                    'resultado': self.primeira_instancia_codes[codigo],
                    'fonte': 'TST'
                })
            elif codigo in self.segunda_instancia_codes:
                tst_g2.append({
                    'codigo': codigo,
                    'resultado': self.segunda_instancia_codes[codigo],
                    'fonte': 'TST'
                })
        
        # Determina fonte de dados G1
        g1_fonte = 'NENHUMA'
        g1_resultado = None
        g2_resultado = None
        
        if g2_info and g2_info['g1_movements']:
            # Dados G1 reais do G2
            g1_fonte = 'G2_REAL'
            g1_resultado = g2_info['g1_movements'][-1]['resultado']
            if g2_info['g2_movements']:
                g2_resultado = g2_info['g2_movements'][-1]['resultado']
        elif tst_g1:
            # Dados G1 preservados no TST
            g1_fonte = 'TST_PRESERVADO'
            g1_resultado = tst_g1[-1]['resultado']
            if tst_g2:
                g2_resultado = tst_g2[-1]['resultado']
        
        # Determina resultado do trabalhador
        worker_outcome = self.determine_worker_outcome(
            g1_resultado, g2_resultado, tst_resultado, g1_fonte
        )
        
        return {
            'numero_processo': numero,
            'g1_fonte': g1_fonte,
            'g1_resultado': g1_resultado,
            'g2_resultado': g2_resultado,
            'tst_resultado': tst_resultado,
            'worker_outcome': worker_outcome,
            'tem_dados_reais_g1': g1_fonte in ['G2_REAL', 'TST_PRESERVADO'],
            'core': core
        }
    
    def determine_worker_outcome(self, g1_resultado, g2_resultado, tst_resultado, fonte):
        """Determina resultado do trabalhador baseado na fonte dos dados."""
        
        if fonte in ['G2_REAL', 'TST_PRESERVADO']:
            # Tem dados reais de G1 - usa l√≥gica completa
            if g1_resultado and g2_resultado and tst_resultado:
                # Fluxo G1‚ÜíG2‚ÜíTST completo
                if g1_resultado in ['Proced√™ncia', 'Proced√™ncia em Parte']:
                    if g2_resultado == 'Provimento':
                        return 'GANHOU' if tst_resultado == 'Desprovido' else 'PERDEU'
                    elif g2_resultado in ['Desprovimento', 'Nega√ß√£o de Seguimento']:
                        return 'GANHOU' if tst_resultado == 'Desprovido' else 'PERDEU'
                elif g1_resultado == 'Improced√™ncia':
                    if g2_resultado == 'Provimento':
                        return 'PERDEU' if tst_resultado == 'Desprovido' else 'GANHOU'
                    elif g2_resultado in ['Desprovimento', 'Nega√ß√£o de Seguimento']:
                        return 'PERDEU' if tst_resultado == 'Desprovido' else 'GANHOU'
            
            elif g1_resultado and tst_resultado:
                # Fluxo G1‚ÜíTST direto
                if g1_resultado in ['Proced√™ncia', 'Proced√™ncia em Parte']:
                    return 'GANHOU' if tst_resultado == 'Desprovido' else 'PERDEU'
                elif g1_resultado == 'Improced√™ncia':
                    return 'PERDEU' if tst_resultado == 'Desprovido' else 'GANHOU'
        
        # Sem dados G1 ou casos indefinidos - usa aproxima√ß√£o
        if tst_resultado == 'Provido':
            return 'GANHOU'
        elif tst_resultado == 'Desprovido':
            return 'PERDEU'
        
        return 'INDEFINIDO'
    
    def run_combined_analysis(self):
        """Executa an√°lise combinada TST + G2."""
        print("üîç AN√ÅLISE COMBINADA TST + G2")
        print("=" * 60)
        
        # Carrega dados G2
        g2_data = self.load_g2_data()
        
        # Carrega dados TST
        tst_data = self.load_tst_data()
        
        # Filtra casos de ass√©dio moral
        assedio_cases = self.filter_assedio_moral_cases(tst_data)
        
        # Analisa casos
        print(f"\\nüìä Analisando {len(assedio_cases):,} casos...")
        
        results = []
        stats = {
            'total': 0,
            'com_dados_reais_g1': 0,
            'apenas_aproximacao': 0,
            'ganhou': 0,
            'perdeu': 0,
            'indefinido': 0
        }
        
        for i, case in enumerate(assedio_cases):
            if i % 1000 == 0:
                print(f"  Caso {i+1:,}/{len(assedio_cases):,}...")
            
            result = self.analyze_case_with_g2_data(case, g2_data)
            results.append(result)
            
            # Estat√≠sticas
            stats['total'] += 1
            if result['tem_dados_reais_g1']:
                stats['com_dados_reais_g1'] += 1
            else:
                stats['apenas_aproximacao'] += 1
            
            if result['worker_outcome'] == 'GANHOU':
                stats['ganhou'] += 1
            elif result['worker_outcome'] == 'PERDEU':
                stats['perdeu'] += 1
            else:
                stats['indefinido'] += 1
        
        # Gera relat√≥rio
        self.generate_combined_report(results, stats, len(g2_data))
        
        return results, stats

    def generate_combined_report(self, results, stats, total_g2_matches):
        """Gera relat√≥rio da an√°lise combinada."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        definidos = stats['ganhou'] + stats['perdeu']
        taxa_sucesso = (stats['ganhou'] / definidos * 100) if definidos > 0 else 0
        
        report = f"""# An√°lise Combinada TST + G2 - Dados Reais de G1

**Data**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üéØ Metodologia H√≠brida

Esta an√°lise combina:
1. **Dados reais de G1** extra√≠dos dos arquivos G2 (TRT) quando dispon√≠veis
2. **Dados preservados no TST** para casos com hist√≥rico completo
3. **Aproxima√ß√£o estat√≠stica** para casos sem dados G1

## üìä Estat√≠sticas Gerais

- **Total de casos analisados**: {stats['total']:,}
- **Casos com dados reais G1**: {stats['com_dados_reais_g1']:,} ({(stats['com_dados_reais_g1']/stats['total'])*100:.1f}%)
- **Casos com aproxima√ß√£o**: {stats['apenas_aproximacao']:,} ({(stats['apenas_aproximacao']/stats['total'])*100:.1f}%)
- **Matches G2 encontrados**: {total_g2_matches:,}

## üèÜ Resultados para o Trabalhador

- **GANHOU**: {stats['ganhou']:,} ({(stats['ganhou']/stats['total'])*100:.1f}%)
- **PERDEU**: {stats['perdeu']:,} ({(stats['perdeu']/stats['total'])*100:.1f}%)
- **INDEFINIDO**: {stats['indefinido']:,} ({(stats['indefinido']/stats['total'])*100:.1f}%)

## üìà Taxa de Sucesso

**{taxa_sucesso:.1f}%** ({stats['ganhou']:,} vit√≥rias em {definidos:,} casos definidos)

## üîç An√°lise por Fonte de Dados

### Casos com Dados Reais G1 ({stats['com_dados_reais_g1']:,} casos)
"""

        # An√°lise dos casos com dados reais
        casos_reais = [r for r in results if r['tem_dados_reais_g1']]
        if casos_reais:
            ganhou_reais = len([r for r in casos_reais if r['worker_outcome'] == 'GANHOU'])
            perdeu_reais = len([r for r in casos_reais if r['worker_outcome'] == 'PERDEU'])
            definidos_reais = ganhou_reais + perdeu_reais
            
            if definidos_reais > 0:
                taxa_reais = (ganhou_reais / definidos_reais) * 100
                report += f"""
- **Taxa de sucesso com dados reais**: {taxa_reais:.1f}%
- **Vit√≥rias**: {ganhou_reais:,}
- **Derrotas**: {perdeu_reais:,}
"""

        # An√°lise dos casos com aproxima√ß√£o
        casos_aproximacao = [r for r in results if not r['tem_dados_reais_g1']]
        if casos_aproximacao:
            ganhou_aprox = len([r for r in casos_aproximacao if r['worker_outcome'] == 'GANHOU'])
            perdeu_aprox = len([r for r in casos_aproximacao if r['worker_outcome'] == 'PERDEU'])
            definidos_aprox = ganhou_aprox + perdeu_aprox
            
            if definidos_aprox > 0:
                taxa_aprox = (ganhou_aprox / definidos_aprox) * 100
                report += f"""
### Casos com Aproxima√ß√£o ({len(casos_aproximacao):,} casos)
- **Taxa de sucesso com aproxima√ß√£o**: {taxa_aprox:.1f}%
- **Vit√≥rias**: {ganhou_aprox:,}
- **Derrotas**: {perdeu_aprox:,}
"""

        report += f"""

## üí° Conclus√µes

1. **Dados reais dispon√≠veis**: {stats['com_dados_reais_g1']:,} casos ({(stats['com_dados_reais_g1']/stats['total'])*100:.1f}%) t√™m dados G1 reais
2. **Metodologia validada**: Combina√ß√£o de dados reais + aproxima√ß√£o
3. **Taxa global de sucesso**: {taxa_sucesso:.1f}%
4. **Qualidade dos dados**: {total_g2_matches:,} matches G2‚ÜíTST identificados

## üîß Fontes de Dados

- **G1 real (G2)**: Extra√≠do dos arquivos TRT quando preservado
- **G1 real (TST)**: Movimentos preservados nos dados TST
- **Aproxima√ß√£o**: Baseada no resultado final do TST
- **G2**: Movimentos dos TRTs e preservados no TST

---
*An√°lise baseada em metodologia h√≠brida com dados reais quando dispon√≠veis*
"""
        
        # Salva relat√≥rio
        report_path = f"{self.output_path}/relatorio_combinado_{timestamp}.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        # Salva CSV detalhado
        csv_path = f"{self.output_path}/resultados_combinados_{timestamp}.csv"
        with open(csv_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([
                'numero_processo', 'g1_fonte', 'g1_resultado', 'g2_resultado',
                'tst_resultado', 'worker_outcome', 'tem_dados_reais_g1', 'core'
            ])
            
            for result in results:
                writer.writerow([
                    result['numero_processo'],
                    result['g1_fonte'],
                    result['g1_resultado'],
                    result['g2_resultado'],
                    result['tst_resultado'],
                    result['worker_outcome'],
                    result['tem_dados_reais_g1'],
                    result['core']
                ])
        
        print(f"\\nüìÑ Relat√≥rio salvo: {report_path}")
        print(f"üìä CSV salvo: {csv_path}")
        
        print(f"\\nüìä RESUMO FINAL:")
        print("=" * 30)
        print(f"Total: {stats['total']:,}")
        print(f"Com dados reais G1: {stats['com_dados_reais_g1']:,}")
        print(f"Taxa de sucesso: {taxa_sucesso:.1f}%")
        
        return report_path

def main():
    """Fun√ß√£o principal."""
    analyzer = TSTWithG2Analyzer()
    analyzer.run_combined_analysis()

if __name__ == "__main__":
    main()